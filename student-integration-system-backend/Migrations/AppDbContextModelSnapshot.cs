// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using student_integration_system_backend.Entities;

#nullable disable

namespace student_integration_system_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.7.22376.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("student_integration_system_backend.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccountCreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomPlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FriendId")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyGuestId")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyOwnerId")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomPlaceId");

                    b.HasIndex("FriendId");

                    b.HasIndex("LobbyOwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.CustomPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CustomPlaces");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FriendId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Lobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CustomPlace")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyOwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("MaxSeats")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LobbyOwnerId");

                    b.ToTable("Lobbies");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.LobbyGuest", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("LobbyId")
                        .HasColumnType("integer");

                    b.HasKey("ClientId", "LobbyId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("LobbyId");

                    b.ToTable("LobbyGuests");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.LobbyOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("LobbyOwners");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Moderator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Moderators");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.PlaceOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PlacesOwners");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Client"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PlaceOwner"
                        });
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "Admin",
                            HashedPassword = "Admin",
                            Login = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "Moderator",
                            HashedPassword = "Moderator",
                            Login = "Moderator"
                        });
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Account", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("student_integration_system_backend.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Admin", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Client", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.CustomPlace", "CustomPlace")
                        .WithMany("Clients")
                        .HasForeignKey("CustomPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("student_integration_system_backend.Entities.Friend", "Friend")
                        .WithMany("Clients")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("student_integration_system_backend.Entities.LobbyOwner", "LobbyOwner")
                        .WithMany("Clients")
                        .HasForeignKey("LobbyOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("student_integration_system_backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomPlace");

                    b.Navigation("Friend");

                    b.Navigation("LobbyOwner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Friend", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.Friend", null)
                        .WithMany("Friends")
                        .HasForeignKey("FriendId");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Lobby", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.LobbyOwner", "LobbyOwner")
                        .WithMany()
                        .HasForeignKey("LobbyOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LobbyOwner");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.LobbyGuest", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.Client", "Client")
                        .WithOne("LobbyGuest")
                        .HasForeignKey("student_integration_system_backend.Entities.LobbyGuest", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("student_integration_system_backend.Entities.Lobby", "Lobby")
                        .WithMany()
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Moderator", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.PlaceOwner", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.Place", null)
                        .WithMany("PlaceOwners")
                        .HasForeignKey("PlaceId");

                    b.HasOne("student_integration_system_backend.Entities.User", "User")
                        .WithOne("PlaceOwner")
                        .HasForeignKey("student_integration_system_backend.Entities.PlaceOwner", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.UserRole", b =>
                {
                    b.HasOne("student_integration_system_backend.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("student_integration_system_backend.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Client", b =>
                {
                    b.Navigation("LobbyGuest")
                        .IsRequired();
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.CustomPlace", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Friend", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Friends");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.LobbyOwner", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Place", b =>
                {
                    b.Navigation("PlaceOwners");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("student_integration_system_backend.Entities.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("PlaceOwner")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
